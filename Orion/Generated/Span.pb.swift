// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Span.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright (c) 2018 Thapovan info Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Com_Thapovan_Orion_Proto_Span {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var traceContext: Com_Thapovan_Orion_Proto_Trace {
    get {return _storage._traceContext ?? Com_Thapovan_Orion_Proto_Trace()}
    set {_uniqueStorage()._traceContext = newValue}
  }
  /// Returns true if `traceContext` has been explicitly set.
  public var hasTraceContext: Bool {return _storage._traceContext != nil}
  /// Clears the value of `traceContext`. Subsequent reads from it will return its default value.
  public mutating func clearTraceContext() {_storage._traceContext = nil}

  public var spanID: String {
    get {return _storage._spanID}
    set {_uniqueStorage()._spanID = newValue}
  }

  public var event: OneOf_Event? {
    get {return _storage._event}
    set {_uniqueStorage()._event = newValue}
  }

  public var startEvent: Com_Thapovan_Orion_Proto_StartEvent {
    get {
      if case .startEvent(let v)? = _storage._event {return v}
      return Com_Thapovan_Orion_Proto_StartEvent()
    }
    set {_uniqueStorage()._event = .startEvent(newValue)}
  }

  public var endEvent: Com_Thapovan_Orion_Proto_EndEvent {
    get {
      if case .endEvent(let v)? = _storage._event {return v}
      return Com_Thapovan_Orion_Proto_EndEvent()
    }
    set {_uniqueStorage()._event = .endEvent(newValue)}
  }

  public var logEvent: Com_Thapovan_Orion_Proto_LogEvent {
    get {
      if case .logEvent(let v)? = _storage._event {return v}
      return Com_Thapovan_Orion_Proto_LogEvent()
    }
    set {_uniqueStorage()._event = .logEvent(newValue)}
  }

  public var timestamp: UInt64 {
    get {return _storage._timestamp}
    set {_uniqueStorage()._timestamp = newValue}
  }

  public var serviceName: String {
    get {return _storage._serviceName}
    set {_uniqueStorage()._serviceName = newValue}
  }

  public var eventLocation: String {
    get {return _storage._eventLocation}
    set {_uniqueStorage()._eventLocation = newValue}
  }

  public var parentSpanID: String {
    get {return _storage._parentSpanID}
    set {_uniqueStorage()._parentSpanID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Event: Equatable {
    case startEvent(Com_Thapovan_Orion_Proto_StartEvent)
    case endEvent(Com_Thapovan_Orion_Proto_EndEvent)
    case logEvent(Com_Thapovan_Orion_Proto_LogEvent)

    public static func ==(lhs: Com_Thapovan_Orion_Proto_Span.OneOf_Event, rhs: Com_Thapovan_Orion_Proto_Span.OneOf_Event) -> Bool {
      switch (lhs, rhs) {
      case (.startEvent(let l), .startEvent(let r)): return l == r
      case (.endEvent(let l), .endEvent(let r)): return l == r
      case (.logEvent(let l), .logEvent(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.thapovan.orion.proto"

extension Com_Thapovan_Orion_Proto_Span: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Span"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "trace_context"),
    2: .standard(proto: "span_id"),
    3: .standard(proto: "start_event"),
    4: .standard(proto: "end_event"),
    5: .standard(proto: "log_event"),
    6: .same(proto: "timestamp"),
    7: .standard(proto: "service_name"),
    8: .standard(proto: "event_location"),
    9: .standard(proto: "parent_span_id"),
  ]

  fileprivate class _StorageClass {
    var _traceContext: Com_Thapovan_Orion_Proto_Trace? = nil
    var _spanID: String = String()
    var _event: Com_Thapovan_Orion_Proto_Span.OneOf_Event?
    var _timestamp: UInt64 = 0
    var _serviceName: String = String()
    var _eventLocation: String = String()
    var _parentSpanID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _traceContext = source._traceContext
      _spanID = source._spanID
      _event = source._event
      _timestamp = source._timestamp
      _serviceName = source._serviceName
      _eventLocation = source._eventLocation
      _parentSpanID = source._parentSpanID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._traceContext)
        case 2: try decoder.decodeSingularStringField(value: &_storage._spanID)
        case 3:
          var v: Com_Thapovan_Orion_Proto_StartEvent?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .startEvent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .startEvent(v)}
        case 4:
          var v: Com_Thapovan_Orion_Proto_EndEvent?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .endEvent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .endEvent(v)}
        case 5:
          var v: Com_Thapovan_Orion_Proto_LogEvent?
          if let current = _storage._event {
            try decoder.handleConflictingOneOf()
            if case .logEvent(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._event = .logEvent(v)}
        case 6: try decoder.decodeSingularUInt64Field(value: &_storage._timestamp)
        case 7: try decoder.decodeSingularStringField(value: &_storage._serviceName)
        case 8: try decoder.decodeSingularStringField(value: &_storage._eventLocation)
        case 9: try decoder.decodeSingularStringField(value: &_storage._parentSpanID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._traceContext {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._spanID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._spanID, fieldNumber: 2)
      }
      switch _storage._event {
      case .startEvent(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      case .endEvent(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .logEvent(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      case nil: break
      }
      if _storage._timestamp != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._timestamp, fieldNumber: 6)
      }
      if !_storage._serviceName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._serviceName, fieldNumber: 7)
      }
      if !_storage._eventLocation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._eventLocation, fieldNumber: 8)
      }
      if !_storage._parentSpanID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._parentSpanID, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Com_Thapovan_Orion_Proto_Span) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._traceContext != other_storage._traceContext {return false}
        if _storage._spanID != other_storage._spanID {return false}
        if _storage._event != other_storage._event {return false}
        if _storage._timestamp != other_storage._timestamp {return false}
        if _storage._serviceName != other_storage._serviceName {return false}
        if _storage._eventLocation != other_storage._eventLocation {return false}
        if _storage._parentSpanID != other_storage._parentSpanID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
