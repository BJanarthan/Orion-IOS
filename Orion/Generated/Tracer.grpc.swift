//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: Tracer.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import Dispatch
import SwiftGRPC
import SwiftProtobuf

public protocol Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall: ClientCallBidirectionalStreaming {
  /// Do not call this directly, call `receive()` in the protocol extension below instead.
  func _receive(timeout: DispatchTime) throws -> Com_Thapovan_Orion_Proto_ServerResponse?
  /// Call this to wait for a result. Nonblocking.
  func receive(completion: @escaping (ResultOrRPCError<Com_Thapovan_Orion_Proto_ServerResponse?>) -> Void) throws

  /// Send a message to the stream. Nonblocking.
  func send(_ message: Com_Thapovan_Orion_Proto_StreamRequest, completion: @escaping (Error?) -> Void) throws
  /// Do not call this directly, call `send()` in the protocol extension below instead.
  func _send(_ message: Com_Thapovan_Orion_Proto_StreamRequest, timeout: DispatchTime) throws

  /// Call this to close the sending connection. Blocking.
  func closeSend() throws
  /// Call this to close the sending connection. Nonblocking.
  func closeSend(completion: (() -> Void)?) throws
}

public extension Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall {
  /// Call this to wait for a result. Blocking.
  func receive(timeout: DispatchTime = .distantFuture) throws -> Com_Thapovan_Orion_Proto_ServerResponse? { return try self._receive(timeout: timeout) }
}

public extension Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall {
  /// Send a message to the stream and wait for the send operation to finish. Blocking.
  func send(_ message: Com_Thapovan_Orion_Proto_StreamRequest, timeout: DispatchTime = .distantFuture) throws { try self._send(message, timeout: timeout) }
}

fileprivate final class Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCallBase: ClientCallBidirectionalStreamingBase<Com_Thapovan_Orion_Proto_StreamRequest, Com_Thapovan_Orion_Proto_ServerResponse>, Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall {
  override class var method: String { return "/com.thapovan.orion.proto.Tracer/UploadSpanStream" }
}

public protocol Com_Thapovan_Orion_Proto_TracerUploadSpanCall: ClientCallUnary {}

fileprivate final class Com_Thapovan_Orion_Proto_TracerUploadSpanCallBase: ClientCallUnaryBase<Com_Thapovan_Orion_Proto_UnaryRequest, Com_Thapovan_Orion_Proto_ServerResponse>, Com_Thapovan_Orion_Proto_TracerUploadSpanCall {
  override class var method: String { return "/com.thapovan.orion.proto.Tracer/UploadSpan" }
}

public protocol Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCall: ClientCallUnary {}

fileprivate final class Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCallBase: ClientCallUnaryBase<Com_Thapovan_Orion_Proto_BulkRequest, Com_Thapovan_Orion_Proto_ServerResponse>, Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCall {
  override class var method: String { return "/com.thapovan.orion.proto.Tracer/UploadSpanBulk" }
}


/// Instantiate Com_Thapovan_Orion_Proto_TracerServiceClient, then call methods of this protocol to make API calls.
public protocol Com_Thapovan_Orion_Proto_TracerService: ServiceClient {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  func uploadSpanStream(completion: ((CallResult) -> Void)?) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall

  /// Synchronous. Unary.
  func uploadSpan(_ request: Com_Thapovan_Orion_Proto_UnaryRequest) throws -> Com_Thapovan_Orion_Proto_ServerResponse
  /// Asynchronous. Unary.
  func uploadSpan(_ request: Com_Thapovan_Orion_Proto_UnaryRequest, completion: @escaping (Com_Thapovan_Orion_Proto_ServerResponse?, CallResult) -> Void) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanCall

  /// Synchronous. Unary.
  func uploadSpanBulk(_ request: Com_Thapovan_Orion_Proto_BulkRequest) throws -> Com_Thapovan_Orion_Proto_ServerResponse
  /// Asynchronous. Unary.
  func uploadSpanBulk(_ request: Com_Thapovan_Orion_Proto_BulkRequest, completion: @escaping (Com_Thapovan_Orion_Proto_ServerResponse?, CallResult) -> Void) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCall

}

public final class Com_Thapovan_Orion_Proto_TracerServiceClient: ServiceClientBase, Com_Thapovan_Orion_Proto_TracerService {
  /// Asynchronous. Bidirectional-streaming.
  /// Use methods on the returned object to stream messages,
  /// to wait for replies, and to close the connection.
  public func uploadSpanStream(completion: ((CallResult) -> Void)?) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCall {
    return try Com_Thapovan_Orion_Proto_TracerUploadSpanStreamCallBase(channel)
      .start(metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func uploadSpan(_ request: Com_Thapovan_Orion_Proto_UnaryRequest) throws -> Com_Thapovan_Orion_Proto_ServerResponse {
    return try Com_Thapovan_Orion_Proto_TracerUploadSpanCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func uploadSpan(_ request: Com_Thapovan_Orion_Proto_UnaryRequest, completion: @escaping (Com_Thapovan_Orion_Proto_ServerResponse?, CallResult) -> Void) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanCall {
    return try Com_Thapovan_Orion_Proto_TracerUploadSpanCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

  /// Synchronous. Unary.
  public func uploadSpanBulk(_ request: Com_Thapovan_Orion_Proto_BulkRequest) throws -> Com_Thapovan_Orion_Proto_ServerResponse {
    return try Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCallBase(channel)
      .run(request: request, metadata: metadata)
  }
  /// Asynchronous. Unary.
  public func uploadSpanBulk(_ request: Com_Thapovan_Orion_Proto_BulkRequest, completion: @escaping (Com_Thapovan_Orion_Proto_ServerResponse?, CallResult) -> Void) throws -> Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCall {
    return try Com_Thapovan_Orion_Proto_TracerUploadSpanBulkCallBase(channel)
      .start(request: request, metadata: metadata, completion: completion)
  }

}

