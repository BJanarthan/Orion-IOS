// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Events.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

//
// Copyright (c) 2018 Thapovan info Systems
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Com_Thapovan_Orion_Proto_LogLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case debug // = 0
  case info // = 1
  case warn // = 2
  case error // = 3
  case critical // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .debug
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .debug
    case 1: self = .info
    case 2: self = .warn
    case 3: self = .error
    case 4: self = .critical
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .debug: return 0
    case .info: return 1
    case .warn: return 2
    case .error: return 3
    case .critical: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct Com_Thapovan_Orion_Proto_StartEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventID: UInt64 {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  public var metadata: OneOf_Metadata? {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  public var protoStruct: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .protoStruct(let v)? = _storage._metadata {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {_uniqueStorage()._metadata = .protoStruct(newValue)}
  }

  public var jsonString: String {
    get {
      if case .jsonString(let v)? = _storage._metadata {return v}
      return String()
    }
    set {_uniqueStorage()._metadata = .jsonString(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Metadata: Equatable {
    case protoStruct(SwiftProtobuf.Google_Protobuf_Struct)
    case jsonString(String)

    public static func ==(lhs: Com_Thapovan_Orion_Proto_StartEvent.OneOf_Metadata, rhs: Com_Thapovan_Orion_Proto_StartEvent.OneOf_Metadata) -> Bool {
      switch (lhs, rhs) {
      case (.protoStruct(let l), .protoStruct(let r)): return l == r
      case (.jsonString(let l), .jsonString(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Thapovan_Orion_Proto_EndEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventID: UInt64 {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  public var metadata: OneOf_Metadata? {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  public var protoStruct: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .protoStruct(let v)? = _storage._metadata {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {_uniqueStorage()._metadata = .protoStruct(newValue)}
  }

  public var jsonString: String {
    get {
      if case .jsonString(let v)? = _storage._metadata {return v}
      return String()
    }
    set {_uniqueStorage()._metadata = .jsonString(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Metadata: Equatable {
    case protoStruct(SwiftProtobuf.Google_Protobuf_Struct)
    case jsonString(String)

    public static func ==(lhs: Com_Thapovan_Orion_Proto_EndEvent.OneOf_Metadata, rhs: Com_Thapovan_Orion_Proto_EndEvent.OneOf_Metadata) -> Bool {
      switch (lhs, rhs) {
      case (.protoStruct(let l), .protoStruct(let r)): return l == r
      case (.jsonString(let l), .jsonString(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Com_Thapovan_Orion_Proto_LogEvent {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var eventID: UInt64 {
    get {return _storage._eventID}
    set {_uniqueStorage()._eventID = newValue}
  }

  public var level: Com_Thapovan_Orion_Proto_LogLevel {
    get {return _storage._level}
    set {_uniqueStorage()._level = newValue}
  }

  public var message: String {
    get {return _storage._message}
    set {_uniqueStorage()._message = newValue}
  }

  public var metadata: OneOf_Metadata? {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  public var protoStruct: SwiftProtobuf.Google_Protobuf_Struct {
    get {
      if case .protoStruct(let v)? = _storage._metadata {return v}
      return SwiftProtobuf.Google_Protobuf_Struct()
    }
    set {_uniqueStorage()._metadata = .protoStruct(newValue)}
  }

  public var jsonString: String {
    get {
      if case .jsonString(let v)? = _storage._metadata {return v}
      return String()
    }
    set {_uniqueStorage()._metadata = .jsonString(newValue)}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum OneOf_Metadata: Equatable {
    case protoStruct(SwiftProtobuf.Google_Protobuf_Struct)
    case jsonString(String)

    public static func ==(lhs: Com_Thapovan_Orion_Proto_LogEvent.OneOf_Metadata, rhs: Com_Thapovan_Orion_Proto_LogEvent.OneOf_Metadata) -> Bool {
      switch (lhs, rhs) {
      case (.protoStruct(let l), .protoStruct(let r)): return l == r
      case (.jsonString(let l), .jsonString(let r)): return l == r
      default: return false
      }
    }
  }

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "com.thapovan.orion.proto"

extension Com_Thapovan_Orion_Proto_LogLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "DEBUG"),
    1: .same(proto: "INFO"),
    2: .same(proto: "WARN"),
    3: .same(proto: "ERROR"),
    4: .same(proto: "CRITICAL"),
  ]
}

extension Com_Thapovan_Orion_Proto_StartEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".StartEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .same(proto: "protoStruct"),
    3: .same(proto: "jsonString"),
  ]

  fileprivate class _StorageClass {
    var _eventID: UInt64 = 0
    var _metadata: Com_Thapovan_Orion_Proto_StartEvent.OneOf_Metadata?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventID = source._eventID
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._eventID)
        case 2:
          var v: SwiftProtobuf.Google_Protobuf_Struct?
          if let current = _storage._metadata {
            try decoder.handleConflictingOneOf()
            if case .protoStruct(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._metadata = .protoStruct(v)}
        case 3:
          if _storage._metadata != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._metadata = .jsonString(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._eventID, fieldNumber: 1)
      }
      switch _storage._metadata {
      case .protoStruct(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .jsonString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Com_Thapovan_Orion_Proto_StartEvent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventID != other_storage._eventID {return false}
        if _storage._metadata != other_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Thapovan_Orion_Proto_EndEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".EndEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .same(proto: "protoStruct"),
    3: .same(proto: "jsonString"),
  ]

  fileprivate class _StorageClass {
    var _eventID: UInt64 = 0
    var _metadata: Com_Thapovan_Orion_Proto_EndEvent.OneOf_Metadata?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventID = source._eventID
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._eventID)
        case 2:
          var v: SwiftProtobuf.Google_Protobuf_Struct?
          if let current = _storage._metadata {
            try decoder.handleConflictingOneOf()
            if case .protoStruct(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._metadata = .protoStruct(v)}
        case 3:
          if _storage._metadata != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._metadata = .jsonString(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._eventID, fieldNumber: 1)
      }
      switch _storage._metadata {
      case .protoStruct(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      case .jsonString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Com_Thapovan_Orion_Proto_EndEvent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventID != other_storage._eventID {return false}
        if _storage._metadata != other_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension Com_Thapovan_Orion_Proto_LogEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".LogEvent"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "event_id"),
    2: .same(proto: "level"),
    3: .same(proto: "message"),
    4: .same(proto: "protoStruct"),
    5: .same(proto: "jsonString"),
  ]

  fileprivate class _StorageClass {
    var _eventID: UInt64 = 0
    var _level: Com_Thapovan_Orion_Proto_LogLevel = .debug
    var _message: String = String()
    var _metadata: Com_Thapovan_Orion_Proto_LogEvent.OneOf_Metadata?

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eventID = source._eventID
      _level = source._level
      _message = source._message
      _metadata = source._metadata
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._eventID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._level)
        case 3: try decoder.decodeSingularStringField(value: &_storage._message)
        case 4:
          var v: SwiftProtobuf.Google_Protobuf_Struct?
          if let current = _storage._metadata {
            try decoder.handleConflictingOneOf()
            if case .protoStruct(let m) = current {v = m}
          }
          try decoder.decodeSingularMessageField(value: &v)
          if let v = v {_storage._metadata = .protoStruct(v)}
        case 5:
          if _storage._metadata != nil {try decoder.handleConflictingOneOf()}
          var v: String?
          try decoder.decodeSingularStringField(value: &v)
          if let v = v {_storage._metadata = .jsonString(v)}
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._eventID != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._eventID, fieldNumber: 1)
      }
      if _storage._level != .debug {
        try visitor.visitSingularEnumField(value: _storage._level, fieldNumber: 2)
      }
      if !_storage._message.isEmpty {
        try visitor.visitSingularStringField(value: _storage._message, fieldNumber: 3)
      }
      switch _storage._metadata {
      case .protoStruct(let v)?:
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      case .jsonString(let v)?:
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      case nil: break
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public func _protobuf_generated_isEqualTo(other: Com_Thapovan_Orion_Proto_LogEvent) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._eventID != other_storage._eventID {return false}
        if _storage._level != other_storage._level {return false}
        if _storage._message != other_storage._message {return false}
        if _storage._metadata != other_storage._metadata {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
